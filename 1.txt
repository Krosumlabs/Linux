User Layer
__________
OS Layer
__________
H/w Layer 

Kernel - Core part of an OS

OS = Kernel + utilities 
	      (s/w tools)

1950 x10<==osA
     x11<==osA1
     x12<==OSB
..
 UNIX 1971/72

B ->OS
|
B+ ==>os ->unix  --->GNU 1983
(C)

minix ->edu
 |
 Linux(Kernel) -->GNU ->GNULinux  1991

distro (RedHat/Debian)//Utilities + Kernel =>OS
______________________________________________________________________________________

Kernel - File,Process 
File - Data - Under the storage device(HardDisk,USB)
Process - Data - Under the CPU(1.fetch data from memory
			       2.stores to register
			       3.execute //process)
Linux File Types
-----------------
1.Regular File (or) Ordinary file
    a. ASCII (or) Text	--------------- user can able to read 
    b. ELF (executable link file) (or) object file --- user can't able to read

2. Directory 

3. Link file (or) softlink (or) symbolic link 

4. Device file 
    a. character type device (ex: Keyboard,printer,monitor)
    b. block type device (ex: HardDisk,CDROM,USB)

5. namedPIPE (or) FIFO 

6. Socket file 

file - command - determine the file type

Syntax:-
---------
file <filename>
_____________________________________________________________________________

File structure  (or) file directory structure
-----------------------------------------------
			/ <== root directory - like mycomputer
			|
 -------------------------------------------------------
 |	| 	|	|	|	|	| .. |
bin/   etc/    proc/   dev/   root/    home/   mnt/  tmp/ .. <== sub-directories
					 |
					 |__arun/
					 |__anu/
					 |__leo/

 /bin/file1  - internal files(commands) 
		
 /usr/bin/file1 - external files(commands) - os installation time 
 
 /sbin/file1 - root user only can able to run
      
----------------------------------------------------------------------------------
 command 
 command -option
	  -------
	     |<== more specific 
 command -option1option2..optionN <== we can combine multiple options anyorder.

 example
 ---------
 ls 
 ls -l
 ls -r
 ls -lr (or) ls -rl 

 command<space>-option
 
  uname
  uname -r
  uname -s  same as uname
  
  # how to print kernel name and kernel version
  
  uname -rs {enter}
  
  uname -n

  hostname
  man uname {enter}
  
  uname -a
 ----------------------------------------------------------------
  echo {Enter}
  
  echo Linux programming

  command only style --(1)   ls echo whoami uname pwd hostname ...
  |
  command argument style --(2)  ls -l
				ls -lr
				echo "One Two Three"
				uname -rs

  |
  command command(argument)style --(3)   command `command` (or) command $(command)
	
			echo "Login name is:`whoami`"    `` <== backquote 
 
 _____________________________________________________________________________

 echo "My Working kernel name is:`uname`"
 echo "`uname` version is:`uname -r`"
 echo "Today:`date +%D`"
 echo "Login name is:`whoami`"
 -----------------------------------------------------------------------------
 wc filename {Enter}
 No.lines No.words No.chars

 wc -l filename {Enter}  - No.of lines only

 wc -w filename {Enter}  - No.of words only
 
 wc -c filename {Enter} - No.of chars only

----------------------------------------------------------------------------------

   vi filename{Enter} (1)

   command mode - save,copy,paste,delete,newlines etc.,
		press i <==(2) press insert

   input mode (or) insert mode - type your text (3)

---------------------------------------------------------------------------------

 cp oldfile newfile
	    --------
	     overwrite if newfile is already exists
 
 mv oldfile newfile <== rename
_________________________________________________________________________________________
 head
 tail
 more
 less
 ----------//view content 

 cat file1

 vi editor -> yy (copy) p
	      Nyy (Nlines are copied) p

 head filename

 head -n N filename

 tail filename
 tail -n N filename

 more filename	Vs  less filename (page by page) 
 q - quit	    ----
		     |->PgUp PgDn Home End  q ->quit

 ------------------------------------------------------------------------------
 pipe(|)

 commandA | commandB
  |	     |
 o/p	     i/p
  |__________|
 
 wc -l ab.txt
 
 cat ab.txt
 
 cat ab.txt|wc -l
 _____________________________________________________________________________
 grep  - search 
 sed   - search + substitute
 awk   - search + formatting 
 --------//filter commands 
 
 grep
 -----
 - search a pattern from inputfile (or) command result
 |
 grep -option pattern filename
 	
 pattern: text
 action: print (or) display matched pattern lines 

 -n = matched pattern line numbers
 -i = ignore the pattern case
 -c = count the no.of lines
 -v = except the pattern 
 -e = extended pattern (or) multipattern
 -f = attach external pattern file
 -l = list matched pattern filename (filename only)


  grep -e pattern1 -e pattern2  -e pattern3  inputfile
  		(or)
  egrep "pattern1|pattern2|pattern3" inputfile
		(or)
  grep -E "pattern1|pattern2|pattern3" inputfile
		

  vi ptr.txt {Enter}
  pattern1
  pattern2
  pattern3
  :wq
    
  grep -f ptr.txt inputfile 

--------------------------------------------------------------------------------
 grep -option pattern inputfile
 
 pattern: text (or) string
 Action: print  

 sed
 ----
 sed -option 'patternAction' inputfile 

 pattern:  1.LineNumber	    2.Text(or)string
	   ____________	    _________________
	    |                   |
	    |                sed -option '/Pattern/Action' inputfile
	    |
	  sed -option 'NAction' inputfile

 Action: print(p)  delete(d)  substitute(s)

 example
 --------
  print 3rd line content from emp.csv file	=>  sed -option '3p' emp.csv
  ----- ==		      =======
 
  print sales content from emp.csv  ==>  sed -option '/sales/p' emp.csv
  ----- =====		   =======

  1.read - read the data from inputfile (or) command result
  2.stores - stores to internal buffer(pattern buffer)
  3.execute - execute sed commands on the buffer //there is no changes in inputFile 
  4.display - display to monitor 

 +---------+
 | data1			data1
 | data2			data2
 | data3  			data3	-----  data3
 +---------
  IP.txt

  sed -n '3p' IP.txt

  delete 3rd line content -> sed '3d' IP.txt

  N -->/text/
 
 substitute
 -------------
  sed 's/oldpattern/newstring/' inputfile 
	 ..........

  sed substitute - search the oldpattern with inputfile, if oldpattern is matched
  replace newstring, if old pattern is not matched - print inputfile contents

 


[vsk@student ~]$ sed 'p' emp.csv
101,raj,sales,pune,1000
101,raj,sales,pune,1000
102,leo,prod,bglore,2000
102,leo,prod,bglore,2000
124,anu,HR,noida,1234
124,anu,HR,noida,1234
455,xerox,hr,hyd,2400
455,xerox,hr,hyd,2400
452,raj,prod,mumbai,1200
452,raj,prod,mumbai,1200
194,kumar,sales,bglore,2340
194,kumar,sales,bglore,2340
442,paul,sales,mumbai,4891
442,paul,sales,mumbai,4891
592,bibu,Hr,pune,2040
592,bibu,Hr,pune,2040
[vsk@student ~]$ sed -n 'p' emp.csv
101,raj,sales,pune,1000
102,leo,prod,bglore,2000
124,anu,HR,noida,1234
455,xerox,hr,hyd,2400
452,raj,prod,mumbai,1200
194,kumar,sales,bglore,2340
442,paul,sales,mumbai,4891
592,bibu,Hr,pune,2040
[vsk@student ~]$ sed -n '3p' emp.csv
124,anu,HR,noida,1234
[vsk@student ~]$
[vsk@student ~]$ sed  '3p' emp.csv
101,raj,sales,pune,1000
102,leo,prod,bglore,2000
124,anu,HR,noida,1234
124,anu,HR,noida,1234
455,xerox,hr,hyd,2400
452,raj,prod,mumbai,1200
194,kumar,sales,bglore,2340
442,paul,sales,mumbai,4891
592,bibu,Hr,pune,2040
[vsk@student ~]$
[vsk@student ~]$
[vsk@student ~]$ sed -n '3,5p' emp.csv
124,anu,HR,noida,1234
455,xerox,hr,hyd,2400
452,raj,prod,mumbai,1200
[vsk@student ~]$
[vsk@student ~]$ sed -n '3,7p' emp.csv
124,anu,HR,noida,1234
455,xerox,hr,hyd,2400
452,raj,prod,mumbai,1200
194,kumar,sales,bglore,2340
442,paul,sales,mumbai,4891
[vsk@student ~]$
[vsk@student ~]$
[vsk@student ~]$ sed -n -e '3p' -e '7p' emp.csv
124,anu,HR,noida,1234
442,paul,sales,mumbai,4891
[vsk@student ~]$
[vsk@student ~]$ vi IP.txt
[vsk@student ~]$
[vsk@student ~]$ cat IP.txt
data1
data2
data3
[vsk@student ~]$ sed -n '3p' IP.txt
data3
[vsk@student ~]$ sed '3d' IP.txt
data1
data2
[vsk@student ~]$ vi IP.txt
[vsk@student ~]$ cat IP.txt
----Header---
data1
data2
data3
----Footer---
[vsk@student ~]$ sed -e '1d' -e '5d' IP.txt
data1
data2
data3
[vsk@student ~]$
[vsk@student ~]$ sed -n '3p' emp.csv
124,anu,HR,noida,1234
[vsk@student ~]$
[vsk@student ~]$ sed -n '/sales/p' emp.csv
101,raj,sales,pune,1000
194,kumar,sales,bglore,2340
442,paul,sales,mumbai,4891
[vsk@student ~]$
[vsk@student ~]$ sed '3d' emp.csv
101,raj,sales,pune,1000
102,leo,prod,bglore,2000
455,xerox,hr,hyd,2400
452,raj,prod,mumbai,1200
194,kumar,sales,bglore,2340
442,paul,sales,mumbai,4891
592,bibu,Hr,pune,2040
[vsk@student ~]$
[vsk@student ~]$ sed '/sales/d' emp.csv
102,leo,prod,bglore,2000
124,anu,HR,noida,1234
455,xerox,hr,hyd,2400
452,raj,prod,mumbai,1200
592,bibu,Hr,pune,2040
[vsk@student ~]$
[vsk@student ~]$ echo "101,raj,sales,pune"
101,raj,sales,pune
[vsk@student ~]$ echo "101,raj,sales,pune"|sed 's/sales/QA/'
101,raj,QA,pune
[vsk@student ~]$ echo "101,raj,sales,pune"|sed 's/admin/QA/'
101,raj,sales,pune
[vsk@student ~]$ ps
  PID TTY          TIME CMD
 3851 pts/1    00:00:00 bash
13778 pts/1    00:00:00 ps
[vsk@student ~]$
[vsk@student ~]$ ps|sed 's/bash/python/'
  PID TTY          TIME CMD
 3851 pts/1    00:00:00 python
13787 pts/1    00:00:00 ps
13788 pts/1    00:00:00 sed
[vsk@student ~]$ sed 's/sales/QA/' emp.csv
101,raj,QA,pune,1000
102,leo,prod,bglore,2000
124,anu,HR,noida,1234
455,xerox,hr,hyd,2400
452,raj,prod,mumbai,1200
194,kumar,QA,bglore,2340
442,paul,QA,mumbai,4891
592,bibu,Hr,pune,2040
[vsk@student ~]$
=======================================================================================
Activity
--------
1)	 create a directory structure

	 Go to login directory (cd ~  (or) cd {enter})
	 		[ ERP ]
			  |
	  -----------------------------------
	  |		  |		    |
	 Enquiry	  Quotation	    FI
	  |		  |		    |
	  |		  production	    Accounts
   --------------	  |
   |		|	  stores
 ICR 		OCR
	  create a file name enquiry.log under ICR directory
	  write some text 
	  copy this enquiry.log to production
	  |
	  Go to stores - create a new inventory file (stores.txt) 
			 prodNo prodName Qty Cost
			 ...
 	 		- copy this inventory file to OCR directory
			- rename stores.txt ->invoice.txt
			move(invoice.txt) this file into Accounts

-----------------------------------------------------------------------------
 Commandline
 -----------
 a. display total no.of lines from /etc/passwd file =>  wc -l /etc/passwd
							  (or)
							cat /etc/passwd|wc -l
 b. display today date MM/DD/YY format	=> date +%D
					=> echo "Today(MM/DD/YY): `date +%D`"
 c. display kernel details and login name details => uname -a 
						     whoami
 d. using sed - rename bash ->ksh  => ps|sed 's/bash/ksh/' 
     (ps)
 e. search swap space from below command # ignore case 
	cat /proc/meminfo		=> cat /proc/meminfo |grep -i swap
------------------------------------------------------------------------------------

 recap
 ------
 grep -option pattern inputfile

 pattern: string(or) text
 action: print 

 sed -option 'patternAction' inputfile
 
 pattern:  1.LineNumber	   2. /text/
 action: print(p) delete(d) substitute(s)
 awk
 ===
 awk -option '/pattern/{Action}' inputfile
 pattern: string(or)Text
 action: print 
 -----------------------------------------------------------
 awk internal steps
 -------------------
 step 1: read - read the input file content - line by line 
 |
 step 2: split - split each input line content into multiple columns 
	 	 (based on the sep -F<sep>) default fsep is space
 |
 step 3: search - search the pattern 
 |
 step 4: print 

 IP.txt
 --------
 101:userA:bash
 102:userB:ksh
 103:userC:bash
------------------
 awk -F:  '/bash/{print}' IP.txt


step 1:
  1  101:userA:bash
  -------------------
  2  102:userB:ksh
  -------------------
  3  103:userC:bash
  -------------------
step 2:
NR    $1   $2    $3(or) $NF
  1  101|userA |bash
  ------|------|-----			awk -F: '/bash/{print NR,$1,$NF}' IP.txt	
  2  102|userB |ksh			
  ------|------|-----			1 101  bash
  3  103|userC |bash			3 103  bash
  ------|------|-----
    |======= $0 =====|
_______________________________________________________________________________________
 File Permission
 ---------------
  File(F) - 3 operation(mode)
	    _________________
	     read   (r) --------  by user level
	     write  (w) --------  by user level
	     execute (x) ======== by kernel level 

  File(F) - by 3 users 
	    ----------
	     1. user (or) author (or) owner  (u)
	     2. groups 			     (g)
	     3. others			     (o)

 sales		prod		HR <== group
 -----		----		----
 arun		leo		bibu
 vijay		anu		paul

 Login as: arun
 password: 
 arun@host~]$ vi p1.txt {Enter}
 ...
 ...
 :wq
 arun@host~]$ ls -l p1.txt
 <permission> ... arun sales .. p1.txt
---------------------------------------------------------------------------------------
How to change the file permission?

chmod userdetails + mode  filename
		  -
 userdetails(ugo)
 mode(rwx)
 + => To assign a permission
 - => To remove an existing permission 

 To assign execute permission to user ;	   To assign write permission to user
  -> chmod u+x <filename>		   -> chmod u+w filename
					   To Assign write & execute permission to user
 					   -> chmod u+wx filename
 To remove execute permission from user
  -> chmod u-x <filename>

 to assign read/write & execute permission to all(usergroupOthers)
   -> chmod ugo+rwx filename
	    ---
	     a
   ->chmod a+rwx filename   (or) chmod +rwx filename

  rw-rw-r--
  ===___---
  |   |   |_others(o)
  |  group(g)
  user(u)
  ---------------------------------------------------------------------
	read	  write	   execute
	1	  1	   1		 7
	1	  1	   0		 6
        1	  0        1		 5
	1	  0  	   0		 4
	0	  0	   0		 0

	chmod 777 filename
	      |||_others
	      ||__group
	      |__user

	chmod 754 f1.txt
	      |
	      |
	      |
	     rwxr-xr--
-------------------------------------------------------------------------------------
create a new file (p1.txt)
|				     (uname	     uname -r)
command with command style - display kernel name and version
			     login  => whoami
			     working directory   => pwd
			     total no.of process count =>  ps -e|wc -l
			  
save this file ->Give execute permission to user ->run a file
						   
echo "My Working Kernel name is:`uname`  Version is:`uname -r`"
echo "Login name is:`whoami`"
echo "Current working directory is:`pwd`"
echo "Total no.of process count is:`ps -e|wc -l`"

----
create a newfile (p2.txt)
every 2 secs delay
display following commands
date
ls -l
ps
whoami
pwd
date
--------//give execute permission & run a file.

echo "START: `date`"
sleep 2
echo "List of files:-"
ls -l
sleep 2
echo "Current process details:-"
ps
sleep 2
echo "Login name is:`whoami`"
sleep 2
echo "Current Working directory:"
pwd
sleep 2
echo "END:`date`"
--------------------------------------------------------------------------
 Redirection
 ===========
  
	command ---->o/p--->[Monitor]
		     ---
		      1. STDOUT
		      2. STDERR

	command >newFile
		 --------
		     |<== if file is exist - it will overwrite all the existing content
			
   > create & write data to FILE
  ===			
	
   >> - append operation
   
  file descriptor(FD)
  ===================
   functionCall()=FD
		  --
	
    STDIN = 0 
    STDOUT = 1
    STDERR = 2
   ----------------//os
  
   command fd>newfile 
   	   
   date 1>d1.txt same as date >d1.txt
	|
	STDOUT
 
   datee 2>err.log # redirecting command error message to external log file
-------------------------------------------------------------------------------------




			     













